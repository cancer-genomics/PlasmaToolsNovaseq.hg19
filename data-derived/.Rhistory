refbins <- ref54_bins
refbins
refbins <- data.table(ref54_bins)
refbins
refbins <- data.table(ref54_bins)
refids <- refbins$id
setkey(refbins, id)
refbins[,cov:=short+long]
#### Read in bins for z-scores - LUCAS
#this was anyways a csv of bins from each sample from the cluster
lucas<-setDT(lucas %>% filter(chr != "chrX"))
setkey(lucas, id)
lucas[,cov:=short+long]
#binding the reference info to the samples
binsforzscores <- rbind(refbins, lucas)
setwd("~/Dropbox/ScannedNotes/PhDRotations/VelculescuLab2021/Cancer Genomics Lab/MultiStudyModels/nova_seq lucas")
library(PlasmaTools)
library(data.table); library(tidyverse); library(readxl)
library("plyr")
library(devtools)
load_all("rlucas")
#from cluster
lucas <-read_csv('lucas_5mbs_delfi473.csv')
lucas_f <- lucas %>% filter(chr != "chrX")
lucas_f <- lucas_f %>% group_by(id) %>%
mutate(ratio.cor = short.cor/ long.cor,
ratio.scaled = scale(ratio.cor),
ratiovar = factor(paste0("ratio_", bin), paste0("ratio_",1:473)),
cov.cor = short.cor+long.cor,
cov.scaled = scale(cov.cor),
covvar = factor(paste0("cov_", bin), paste0("cov_",1:473)),
short.scaled = scale(short.cor))
lucas_features <- lucas_f %>% ungroup() %>%  select(id, bin, ratio.scaled, ratiovar,short.scaled, cov.scaled, covvar)
lucas_features <- lucas_features %>%
pivot_wider(id, names_from=c(bin),
values_from=c(ratio.scaled,short.scaled, cov.scaled)) %>% rowwise()
#get the Z-score features
#### Read in healthy reference bins
###ideally these objects wouldn't be in Rlucas, we'd just have them separately!!!
load_all("target_distributions/PlasmaToolsHiseq.hg19")
refbins <- data.table(ref54_bins)
refids <- refbins$id
setkey(refbins, id)
refbins[,cov:=short+long]
#### Read in bins for z-scores - LUCAS
#this was anyways a csv of bins from each sample from the cluster
lucas<-setDT(lucas %>% filter(chr != "chrX"))
setkey(lucas, id)
lucas[,cov:=short+long]
#binding the reference info to the samples
binsforzscores <- rbind(refbins, lucas)
#do the loess correction and armmeans
#it is weird that this has to be done all together and then filter the references!!!!
bins2 <- copy(binsforzscores)
countAndNormalize(binsforzscores, measure="cov")
armmeansdt_all <- PlasmaTools:::getArmMeans(binsforzscores)
#countAndNormalize(refbins, measure="cov")
#armmeansdt_ref <- PlasmaTools:::getArmMeans(refbins)
#countAndNormalize(lucas, measure="cov")
#armmeansdt_lucas <- PlasmaTools:::getArmMeans(lucas)
#filter reference IDs, and calculate means and SD (if I do the countAndNormalize separately, the results are slightly off)
armmeansdt_ref <- armmeansdt_ref %>% filter(id %in% refids)
stats <- armmeansdt_ref %>% group_by(arm) %>% dplyr::summarize(Mean=mean(armmean))
stats1 <- armmeansdt_ref %>% group_by(arm)  %>% dplyr::summarize(STD=sd(armmean))
stats <- inner_join(stats,stats1)
#sample IDs
armmeansdt_lucas <- armmeansdt_all %>% filter(!id %in% refids)
#calculate the z-scores
zscores <- rep(NA, length(armmeansdt_lucas$armmean))
for (i in 1:length(armmeansdt_lucas$armmean)){
m <- armmeansdt_lucas[i]$armmean
a <- armmeansdt_lucas[i]$arm
mu <- (stats %>% filter(arm==a))$Mean
sigma <- (stats %>% filter(arm==a))$STD
zscores[i] <- (m - mu)/sigma
}
armmeansdt_lucas[,zscore := zscores]
#reframe the data-table shape
armlevels <- c("1p","1q","2p","2q","3p","3q","4p","4q","5p","5q","6p","6q",
"7p","7q","8p","8q", "9p", "9q","10p","10q","11p","11q","12p",
"12q","13q","14q","15q","16p","16q","17p","17q","18p","18q",
"19p", "19q","20p","20q","21q","22q")
armmeansdt_lucas[,arm:=factor(arm, armlevels)]
armmeansdt_lucas[,armvar:=factor(paste0("zscore_", arm),  paste0("zscore_", armlevels))]
features.zscores_lucas <- dcast(armmeansdt_lucas, id  ~ armvar, value.var="zscore")
setDT(lucas_features)
setkey(lucas_features, id)
setkey(features.zscores_lucas, id)
lucas_features.full <- features.zscores_lucas[lucas_features]
#Write training set
write_csv(lucas_features.full,"LUCAS-training-set_ref54.csv")
lucas_features.full <- read_csv("LUCAS-training-set_ref54.csv")
LUCAS <-read_excel("LUCAS_metadata.xlsx")
#get the 287 used in cohort1 training of LUCAS paper
lucas_meta <- LUCAS%>%filter(Training == "YES") %>% select(id, type, Stage)
lucas_features_done <-inner_join(lucas_meta,as_tibble(lucas_features.full),by=c("id"="id"))
lucas_features_done$Tumor_Type <-lucas_features_done$type
lucas_features_done = lucas_features_done %>% mutate(Tumor_Type = ifelse(type == "healthy","none","lung"))
write_csv(lucas_features_done,"LUCAS-training-set-full_ref54.csv")
#get the Z-score features
#### Read in healthy reference bins
###ideally these objects wouldn't be in Rlucas, we'd just have them separately!!!
load_all("target_distributions/PlasmaToolsHiseq.hg19")
refbins <- data.table(ref20_bins)
refids <- refbins$id
setkey(refbins, id)
refbins[,cov:=short+long]
#### Read in bins for z-scores - LUCAS
#this was anyways a csv of bins from each sample from the cluster
lucas<-setDT(lucas %>% filter(chr != "chrX"))
setkey(lucas, id)
lucas[,cov:=short+long]
#binding the reference info to the samples
binsforzscores <- rbind(refbins, lucas)
#do the loess correction and armmeans
#it is weird that this has to be done all together and then filter the references!!!!
bins2 <- copy(binsforzscores)
countAndNormalize(binsforzscores, measure="cov")
armmeansdt_all <- PlasmaTools:::getArmMeans(binsforzscores)
#countAndNormalize(refbins, measure="cov")
#armmeansdt_ref <- PlasmaTools:::getArmMeans(refbins)
#countAndNormalize(lucas, measure="cov")
#armmeansdt_lucas <- PlasmaTools:::getArmMeans(lucas)
#filter reference IDs, and calculate means and SD (if I do the countAndNormalize separately, the results are slightly off)
armmeansdt_ref <- armmeansdt_ref %>% filter(id %in% refids)
stats <- armmeansdt_ref %>% group_by(arm) %>% dplyr::summarize(Mean=mean(armmean))
stats1 <- armmeansdt_ref %>% group_by(arm)  %>% dplyr::summarize(STD=sd(armmean))
stats <- inner_join(stats,stats1)
#sample IDs
armmeansdt_lucas <- armmeansdt_all %>% filter(!id %in% refids)
#calculate the z-scores
zscores <- rep(NA, length(armmeansdt_lucas$armmean))
for (i in 1:length(armmeansdt_lucas$armmean)){
m <- armmeansdt_lucas[i]$armmean
a <- armmeansdt_lucas[i]$arm
mu <- (stats %>% filter(arm==a))$Mean
sigma <- (stats %>% filter(arm==a))$STD
zscores[i] <- (m - mu)/sigma
}
armmeansdt_lucas[,zscore := zscores]
#reframe the data-table shape
armlevels <- c("1p","1q","2p","2q","3p","3q","4p","4q","5p","5q","6p","6q",
"7p","7q","8p","8q", "9p", "9q","10p","10q","11p","11q","12p",
"12q","13q","14q","15q","16p","16q","17p","17q","18p","18q",
"19p", "19q","20p","20q","21q","22q")
armmeansdt_lucas[,arm:=factor(arm, armlevels)]
armmeansdt_lucas[,armvar:=factor(paste0("zscore_", arm),  paste0("zscore_", armlevels))]
features.zscores_lucas <- dcast(armmeansdt_lucas, id  ~ armvar, value.var="zscore")
setDT(lucas_features)
setkey(lucas_features, id)
setkey(features.zscores_lucas, id)
lucas_features.full <- features.zscores_lucas[lucas_features]
#Write training set
write_csv(lucas_features.full,"LUCAS-training-set_ref20.csv")
lucas_features.full <- read_csv("LUCAS-training-set_ref20.csv")
LUCAS <-read_excel("LUCAS_metadata.xlsx")
#get the 287 used in cohort1 training of LUCAS paper
lucas_meta <- LUCAS%>%filter(Training == "YES") %>% select(id, type, Stage)
lucas_features_done <-inner_join(lucas_meta,as_tibble(lucas_features.full),by=c("id"="id"))
lucas_features_done$Tumor_Type <-lucas_features_done$type
lucas_features_done = lucas_features_done %>% mutate(Tumor_Type = ifelse(type == "healthy","none","lung"))
write_csv(lucas_features_done,"LUCAS-training-set-full_ref20.csv")
#Write training set
write_csv(lucas_features.full,"LUCAS-training-set_ref20.csv")
lucas_features.full <- read_csv("LUCAS-training-set_ref20.csv")
LUCAS <-read_excel("LUCAS_metadata.xlsx")
#get the 287 used in cohort1 training of LUCAS paper
lucas_meta <- LUCAS%>%filter(Training == "YES") %>% select(id, type, Stage)
lucas_features_done <-inner_join(lucas_meta,as_tibble(lucas_features.full),by=c("id"="id"))
lucas_features_done$Tumor_Type <-lucas_features_done$type
lucas_features_done = lucas_features_done %>% mutate(Tumor_Type = ifelse(type == "healthy","none","lung"))
write_csv(lucas_features_done,"LUCAS-training-set-full_ref20.csv")
#from cluster
lucas <-read_csv('lucas_5mbs_delfi473.csv')
lucas_f <- lucas %>% filter(chr != "chrX")
lucas_f <- lucas_f %>% group_by(id) %>%
mutate(ratio.cor = short.cor/ long.cor,
ratio.scaled = scale(ratio.cor),
ratiovar = factor(paste0("ratio_", bin), paste0("ratio_",1:473)),
cov.cor = short.cor+long.cor,
cov.scaled = scale(cov.cor),
covvar = factor(paste0("cov_", bin), paste0("cov_",1:473)),
short.scaled = scale(short.cor))
lucas_features <- lucas_f %>% ungroup() %>%  select(id, bin, ratio.scaled, ratiovar,short.scaled, cov.scaled, covvar)
lucas_features <- lucas_features %>%
pivot_wider(id, names_from=c(bin),
values_from=c(ratio.scaled,short.scaled, cov.scaled)) %>% rowwise()
#get the Z-score features
#### Read in healthy reference bins
###ideally these objects wouldn't be in Rlucas, we'd just have them separately!!!
load_all("target_distributions/PlasmaToolsHiseq.hg19")
refbins <- data.table(ref54_bins)
refids <- refbins$id
setkey(refbins, id)
refbins[,cov:=short+long]
refbins
#### Read in bins for z-scores - LUCAS
#this was anyways a csv of bins from each sample from the cluster
lucas<-setDT(lucas %>% filter(chr != "chrX"))
setkey(lucas, id)
lucas[,cov:=short+long]
#binding the reference info to the samples
binsforzscores <- rbind(refbins, lucas)
bins2 <- copy(binsforzscores)
countAndNormalize(binsforzscores, measure="cov")
armmeansdt_all <- PlasmaTools:::getArmMeans(binsforzscores)
#filter reference IDs, and calculate means and SD (if I do the countAndNormalize separately, the results are slightly off)
armmeansdt_ref <- armmeansdt_ref %>% filter(id %in% refids)
stats <- armmeansdt_ref %>% group_by(arm) %>% dplyr::summarize(Mean=mean(armmean))
stats1 <- armmeansdt_ref %>% group_by(arm)  %>% dplyr::summarize(STD=sd(armmean))
stats <- inner_join(stats,stats1)
armmeansdt_ref <- armmeansdt_all %>% filter(id %in% refids)
stats <- armmeansdt_ref %>% group_by(arm) %>% dplyr::summarize(Mean=mean(armmean))
stats1 <- armmeansdt_ref %>% group_by(arm)  %>% dplyr::summarize(STD=sd(armmean))
stats <- inner_join(stats,stats1)
armmeansdt_lucas <- armmeansdt_all %>% filter(!id %in% refids)
zscores <- rep(NA, length(armmeansdt_lucas$armmean))
for (i in 1:length(armmeansdt_lucas$armmean)){
m <- armmeansdt_lucas[i]$armmean
a <- armmeansdt_lucas[i]$arm
mu <- (stats %>% filter(arm==a))$Mean
sigma <- (stats %>% filter(arm==a))$STD
zscores[i] <- (m - mu)/sigma
}
armmeansdt_lucas[,zscore := zscores]
#reframe the data-table shape
armlevels <- c("1p","1q","2p","2q","3p","3q","4p","4q","5p","5q","6p","6q",
"7p","7q","8p","8q", "9p", "9q","10p","10q","11p","11q","12p",
"12q","13q","14q","15q","16p","16q","17p","17q","18p","18q",
"19p", "19q","20p","20q","21q","22q")
armmeansdt_lucas[,arm:=factor(arm, armlevels)]
armmeansdt_lucas[,armvar:=factor(paste0("zscore_", arm),  paste0("zscore_", armlevels))]
features.zscores_lucas <- dcast(armmeansdt_lucas, id  ~ armvar, value.var="zscore")
setDT(lucas_features)
setkey(lucas_features, id)
setkey(features.zscores_lucas, id)
lucas_features.full <- features.zscores_lucas[lucas_features]
#Write training set
write_csv(lucas_features.full,"LUCAS-training-set_ref54.csv")
lucas_features.full <- read_csv("LUCAS-training-set_ref54.csv")
LUCAS <-read_excel("LUCAS_metadata.xlsx")
#get the 287 used in cohort1 training of LUCAS paper
lucas_meta <- LUCAS%>%filter(Training == "YES") %>% select(id, type, Stage)
lucas_features_done <-inner_join(lucas_meta,as_tibble(lucas_features.full),by=c("id"="id"))
lucas_features_done$Tumor_Type <-lucas_features_done$type
lucas_features_done = lucas_features_done %>% mutate(Tumor_Type = ifelse(type == "healthy","none","lung"))
write_csv(lucas_features_done,"LUCAS-training-set-full_ref54.csv")
#get the Z-score features
#### Read in healthy reference bins
###ideally these objects wouldn't be in Rlucas, we'd just have them separately!!!
load_all("target_distributions/PlasmaToolsHiseq.hg19")
refbins <- data.table(ref20_bins)
refids <- refbins$id
setkey(refbins, id)
refbins[,cov:=short+long]
#### Read in bins for z-scores - LUCAS
#this was anyways a csv of bins from each sample from the cluster
lucas<-setDT(lucas %>% filter(chr != "chrX"))
setkey(lucas, id)
lucas[,cov:=short+long]
#binding the reference info to the samples
binsforzscores <- rbind(refbins, lucas)
#do the loess correction and armmeans
#it is weird that this has to be done all together and then filter the references!!!!
bins2 <- copy(binsforzscores)
countAndNormalize(binsforzscores, measure="cov")
armmeansdt_all <- PlasmaTools:::getArmMeans(binsforzscores)
#filter reference IDs, and calculate means and SD (if I do the countAndNormalize separately, the results are slightly off)
armmeansdt_ref <- armmeansdt_all %>% filter(id %in% refids)
stats <- armmeansdt_ref %>% group_by(arm) %>% dplyr::summarize(Mean=mean(armmean))
stats1 <- armmeansdt_ref %>% group_by(arm)  %>% dplyr::summarize(STD=sd(armmean))
stats <- inner_join(stats,stats1)
#sample IDs
armmeansdt_lucas <- armmeansdt_all %>% filter(!id %in% refids)
#calculate the z-scores
zscores <- rep(NA, length(armmeansdt_lucas$armmean))
for (i in 1:length(armmeansdt_lucas$armmean)){
m <- armmeansdt_lucas[i]$armmean
a <- armmeansdt_lucas[i]$arm
mu <- (stats %>% filter(arm==a))$Mean
sigma <- (stats %>% filter(arm==a))$STD
zscores[i] <- (m - mu)/sigma
}
armmeansdt_lucas[,zscore := zscores]
#reframe the data-table shape
armlevels <- c("1p","1q","2p","2q","3p","3q","4p","4q","5p","5q","6p","6q",
"7p","7q","8p","8q", "9p", "9q","10p","10q","11p","11q","12p",
"12q","13q","14q","15q","16p","16q","17p","17q","18p","18q",
"19p", "19q","20p","20q","21q","22q")
armmeansdt_lucas[,arm:=factor(arm, armlevels)]
armmeansdt_lucas[,armvar:=factor(paste0("zscore_", arm),  paste0("zscore_", armlevels))]
features.zscores_lucas <- dcast(armmeansdt_lucas, id  ~ armvar, value.var="zscore")
setDT(lucas_features)
setkey(lucas_features, id)
setkey(features.zscores_lucas, id)
lucas_features.full <- features.zscores_lucas[lucas_features]
#Write training set
write_csv(lucas_features.full,"LUCAS-training-set_ref20.csv")
lucas_features.full <- read_csv("LUCAS-training-set_ref20.csv")
LUCAS <-read_excel("LUCAS_metadata.xlsx")
#get the 287 used in cohort1 training of LUCAS paper
lucas_meta <- LUCAS%>%filter(Training == "YES") %>% select(id, type, Stage)
lucas_features_done <-inner_join(lucas_meta,as_tibble(lucas_features.full),by=c("id"="id"))
lucas_features_done$Tumor_Type <-lucas_features_done$type
lucas_features_done = lucas_features_done %>% mutate(Tumor_Type = ifelse(type == "healthy","none","lung"))
write_csv(lucas_features_done,"LUCAS-training-set-full_ref20.csv")
z20 <- read_csv("LUCAS-training-set-full_ref20.csv")
z54 <- read_csv("LUCAS-training-set-full_ref54.csv")
z20
plot(z20$zscore_1p)
plot(z54$zscore_1p)
plot(z20$zscore_1p)+plot(z54$zscore_1p)
plot(z20$zscore_1p,z54$zscore_1p)
plot(z20$zscore_10p,z54$zscore_10p)
z20[ , grepl( "zscore" , names( z20 ) ) ]
z20<-z20[ , grepl( "zscore" , names( z20 ) ) ]
z54<-z54[ , grepl( "zscore" , names( z54 ) ) ]
names(z20)
for (name in names(z20)) {
plot(z20$name,z54$name)
}
name
z20$name
z20.name
z20[1]
length(names(z20))
for (n in 1:length(names(z20))) {
plot(z20[n],z54[n])
}
plot(z20[n],z54[n])
z20[n]
z20$zscore_1p
plot(list(z20[n]),list(z54[n]))
list(z20[n])
as.list(z20[n])
plot(as.list(z20[n]),as.list(z54[n]))
as.list(z20[n])
as.list(z54[n])
z20["zscore_1p"]
z20$"zscore_1p"
names(z20)
names(z20)[1]
plot(z20$names(z20)[n],z54$names(z54)[n])
plot(z20$!!ensym(names(z20)[n]),z54$!!ensym(names(z54)[n])
!!ensym(names(z20)[n]
)
select(z20,n)
plot(select(z20,n))
plot(select(z20,n),select(z54,n))
select(z20,n)
select(z54,n)
data.frame(select(z20,n),select(z54,n))
for (n in 1:length(names(z20))) {
d <-data.frame(select(z20,n),select(z54,n))
plot(d)
}
for (n in 1:length(names(z20))) {
d <-data.frame(select(z20,n),select(z54,n))
plot(d) + xlab("Z score from reference 20") + ylab("Z score from reference 54")
}
for (n in 1:length(names(z20))) {
d <-data.frame(select(z20,n),select(z54,n))
ggplot(d) + xlab("Z score from reference 20") + ylab("Z score from reference 54")
}
for (n in 1:length(names(z20))) {
d <-data.frame(select(z20,n),select(z54,n))
ggplot(d) + xlab("Z score from reference 20") + ylab("Z score from reference 54")
}
library(ggplot2)
for (n in 1:length(names(z20))) {
d <-data.frame(select(z20,n),select(z54,n))
ggplot(d) + xlab("Z score from reference 20") + ylab("Z score from reference 54")
}
ggplot(d)
d <-data.frame(select(z20,n),select(z54,n))
ggplot(d)
plot(d)
d
colnames(d) <- c("z20","z54")
ggplot(d,aes(x="z20",y="z54")) + xlab("Z score from reference 20") + ylab("Z score from reference 54")
d
ggplot(as.tibble(d),aes(x="z20",y="z54")) + xlab("Z score from reference 20") + ylab("Z score from reference 54")
ggplot(as_tibble(d),aes(x="z20",y="z54")) + xlab("Z score from reference 20") + ylab("Z score from reference 54")
ggplot(data.frame(d),aes(x="z20",y="z54")) + xlab("Z score from reference 20") + ylab("Z score from reference 54")
ggplot(data.frame(d),aes(x="z20",y="z54"))
ggplot(data.frame(d))
plot(data.frame(d))
plot(data.frame(d),main=names(z20)[n])
plot(data.frame(d),main=names(z20)[n]) + stat_cor(method = "pearson", label.x = 3, label.y = 30)
cor(select(z20,n),select(z54,n),method="pearson")
cor(select(z20,n),select(z54,n),method="pearson")[1]
d <-data.frame(select(z20,n),select(z54,n))
colnames(d) <- c("z20","z54")
plot(data.frame(d),main=names(z20)[n])
c <- cor(select(z20,n),select(z54,n),method="pearson")
text(10, 10, paste("corr = ",c,sep=""))
d <-data.frame(select(z20,n),select(z54,n))
colnames(d) <- c("z20","z54")
plot(data.frame(d),main=names(z20)[n])
c <- cor(select(z20,n),select(z54,n),method="pearson")
text(10, 1, paste("corr = ",c,sep=""))
d <-data.frame(select(z20,n),select(z54,n))
colnames(d) <- c("z20","z54")
plot(data.frame(d),main=names(z20)[n])
c <- cor(select(z20,n),select(z54,n),method="pearson")
text(10, -100, paste("corr = ",c,sep=""))
for (n in 1:length(names(z20))) {
d <-data.frame(select(z20,n),select(z54,n))
colnames(d) <- c("z20","z54")
plot(data.frame(d),main=names(z20)[n])
c <- cor(select(z20,n),select(z54,n),method="pearson")
text(10, -100, paste("corr = ",c,sep=""))
}
refids
select(z20,n)
select(z54,n)
refids <- read_csv("../ReferenceIDs_healthies_for_z_scores.csv")
setwd("~/Dropbox/ScannedNotes/PhDRotations/VelculescuLab2021/Cancer Genomics Lab/MultiStudyModels/nova_seq lucas/target_distributions")
refids <- read_csv("../ReferenceIDs_healthies_for_z_scores.csv")
refids
refids <- read_csv("../ReferenceIDs_healthies_for_z_scores.csv")$pgdx_id
refids
refids <- read_csv("../ReferenceIDs_healthies_for_z_scores.csv")
refids <- refids[pgdx_id != "PGDX18450P1"]
refids <- refids$pgdx_id
refids
refids <- read_csv("../ReferenceIDs_healthies_for_z_scores.csv")
refids <- refids[pgdx_id != "PGDX18450P1"]
refids
refids <- refids[pgdx_id != "PGDX18450P1"]
refids <- refids %>% filter(pgdx_id != "PGDX18450P1")
refids <- refids$pgdx_id
paste("refids","_gc.csv",sep="")
paste(refids,"_gc.csv",sep="")
paste(datadir,refids,"_gc.csv",sep="")
datadir <- "/dcl02/leased/cglab/rscharpf/cristiano/projects/lucas/panel-of-normal/gc-counts"
paste(datadir,refids,"_gc.csv",sep="")
ref54_paths <-paste(datadir,refids,"_gc.csv",sep="")
write_csv(ref54_paths,"ref54_paths.csv")
write_csv(data.frame(ref54_paths),"ref54_paths.csv")
paste(datadir,refids,"_gc.csv",sep="")
as.list(ref54_paths)
ref54_paths <- read_csv("ref54_paths.csv")
x <- rbindlist(lapply(ref54_paths, fread))
ref54_paths
DataFrameList(ref54_paths)
as.list(ref54_paths)
ref54_paths <- read_csv("ref54_paths.csv")
ref54_paths
as.list(ref54_paths)
refids <- read_csv("../ReferenceIDs_healthies_for_z_scores.csv")
refids <- refids %>% filter(pgdx_id != "PGDX18450P1")
refids
refids <- refids %>% filter(pgdx_id == "PGDX18450P1")
refids
refids <- read_csv("../ReferenceIDs_healthies_for_z_scores.csv")
refids <- refids %>% filter(pgdx_id != "PGDX18450P1")
refids <- refids$pgdx_id
refids
refbins <- data.table(ref54_bins)
refbins
refids <- refbins$id
unique(refids)
valid_meta
unique(valid_meta$id)
ref_panel
refids <- valid_meta[ref_panel==TRUE][,id]
refids
ref54_paths <- read_csv("ref54_paths.csv")
x <- rbindlist(lapply(as.list(ref54_paths), fread))
as.list(ref54_paths)
file.list(datadir)
datadir <- "PlasmaToolsHiseq.hg19"
list.files(datadir)
as.list(ref54_paths)[1]
as.list(ref54_paths)[[1]]
datadir <- "/dcl02/leased/cglab/rscharpf/cristiano/projects/lucas/panel-of-normal/gc-counts"
ref54_paths <-paste(datadir,refids,"/_gc.csv",sep="")
write_csv(data.frame(ref54_paths),"ref54_paths.csv")
ref54_paths <- read_csv("ref54_paths.csv")
ref54_paths
datadir <- "/dcl02/leased/cglab/rscharpf/cristiano/projects/lucas/panel-of-normal/gc-counts/"
ref54_paths <-paste(datadir,refids,"_gc.csv",sep="")
write_csv(data.frame(ref54_paths),"ref54_paths.csv")
ref54_paths <- read_csv("ref54_paths.csv")
ref54_paths
refids <- read_csv("../ReferenceIDs_healthies_for_z_scores.csv")
refids
refids <- refids %>% filter(!is.na(psomagen_submission))
refids <- refids$pgdx_id
refids
datadir <- "/dcl02/leased/cglab/rscharpf/cristiano/projects/lucas/panel-of-normal/gc-counts/"
ref54_paths <-paste(datadir,refids,"_gc.csv",sep="")
write_csv(data.frame(ref54_paths),"ref20_paths.csv")
ref54_paths <- read_csv("ref20_paths.csv")
datadir <- "/dcl02/leased/cglab/rscharpf/cristiano/projects/lucas/panel-of-normal/gc-counts/"
ref20_paths <-paste(datadir,refids,"_gc.csv",sep="")
write_csv(data.frame(ref20_paths),"ref20_paths.csv")
ref20_paths <- read_csv("ref20_paths.csv")
ref20_paths
target54 <- read_csv("target54.csv")
setwd("~/Dropbox/ScannedNotes/PhDRotations/VelculescuLab2021/Cancer Genomics Lab/MultiStudyModels/nova_seq lucas/target_distributions/PlasmaToolsHiseq.hg19/data-derived")
target54 <- read_csv("target54.csv")
usethis::use_data(target54)
target20 <- read_csv("target20.csv")
devtools::use_data(target20)
usethis::use_data(target20)
target20 <- read_csv("target20.csv")
library(tidyverse)
target20 <- read_csv("target20.csv")
usethis::use_data(target20)
usethis::use_data(target20,overwrite=TRUE)
